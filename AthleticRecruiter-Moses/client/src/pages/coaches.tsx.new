import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Coach, insertCoachSchema } from "@shared/schema";
import { 
  UserPlusIcon, 
  SearchIcon, 
  FilterIcon,
  EditIcon,
  TrashIcon,
  MailIcon,
  PlusIcon,
  Star,
  Trophy,
  SlidersHorizontal,
  School,
  ChevronLeft,
  ChevronRight,
  Edit,
  Phone,
  Mail,
  MapPin,
  BookOpen
} from "lucide-react";
import { SchoolWithLogo } from "@/components/ui/school-logo";
import { apiRequest } from "@/lib/queryClient";
import { queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"

// Form schema
const coachFormSchema = insertCoachSchema.extend({
  firstName: z.string().min(1, "First name is required"),
  lastName: z.string().min(1, "Last name is required"),
  email: z.string().min(1, "Email is required").email("Invalid email address"),
  school: z.string().min(1, "School is required"),
  sport: z.string().min(1, "Sport is required"),
});

type CoachFormValues = z.infer<typeof coachFormSchema>;

export default function Coaches() {
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [selectedCoach, setSelectedCoach] = useState<Coach | null>(null);
  // Filters for All Coaches section
  const [sportFilter, setSportFilter] = useState<string>("all_sports");
  const [divisionFilter, setDivisionFilter] = useState<string>("");
  const [conferenceFilter, setConferenceFilter] = useState<string>("");
  const [roleFilter, setRoleFilter] = useState<string>("");
  const [statusFilter, setStatusFilter] = useState<string>("");
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [coachesPerPage] = useState<number>(10); // Show 10 coaches per page
  const [selectedCoachForView, setSelectedCoachForView] = useState<Coach | null>(null);
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);
  
  // Filters for My Saved Coaches section
  const [savedSportFilter, setSavedSportFilter] = useState<string>("all_sports");
  const [savedDivisionFilter, setSavedDivisionFilter] = useState<string>("");
  const [savedSearchQuery, setSavedSearchQuery] = useState<string>("");
  const [savedCurrentPage, setSavedCurrentPage] = useState<number>(1);
  const [savedCoachesPerPage] = useState<number>(5); // Show 5 saved coaches per page
  const { toast } = useToast();
  
  // Reset to first page whenever filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [sportFilter, divisionFilter, conferenceFilter, roleFilter, searchQuery]);
  
  // Reset saved coaches page whenever saved filters change
  useEffect(() => {
    setSavedCurrentPage(1);
  }, [savedSportFilter, savedDivisionFilter, savedSearchQuery]);
  
  // Fetch user profile
  const { data: userProfile } = useQuery({
    queryKey: ["/api/user/profile"],
  });
  
  // We no longer auto-filter by user's sport
  // This allows us to show all coaches by default
  
  // Fetch all coaches
  const { data: coaches, isLoading } = useQuery({
    queryKey: ["/api/coaches", sportFilter, divisionFilter, conferenceFilter, roleFilter, searchQuery],
    queryFn: async () => {
      // Construct query params
      const params = new URLSearchParams();
      if (sportFilter && sportFilter !== "all_sports") params.append("sport", sportFilter);
      if (divisionFilter && divisionFilter !== "all_divisions") params.append("division", divisionFilter);
      if (conferenceFilter && conferenceFilter !== "all_conferences") params.append("conference", conferenceFilter);
      if (roleFilter && roleFilter !== "all_roles") params.append("position", roleFilter);
      if (searchQuery) params.append("search", searchQuery);
      
      const url = `/api/coaches${params.toString() ? `?${params.toString()}` : ''}`;
      const response = await fetch(url);
      if (!response.ok) throw new Error("Failed to fetch coaches");
      return response.json();
    }
  });
  
  // Fetch saved coaches separately
  const { data: savedCoaches, isLoading: isSavedLoading } = useQuery({
    queryKey: ["/api/coaches/saved", savedSportFilter, savedDivisionFilter, savedSearchQuery],
    queryFn: async () => {
      // Construct query params for saved coaches
      const params = new URLSearchParams();
      if (savedSportFilter && savedSportFilter !== "all_sports") params.append("sport", savedSportFilter);
      if (savedSearchQuery) params.append("search", savedSearchQuery);
      params.append("favorite", "true"); // Always get favorites for saved coaches
      
      const url = `/api/coaches${params.toString() ? `?${params.toString()}` : ''}`;
      const response = await fetch(url);
      if (!response.ok) throw new Error("Failed to fetch saved coaches");
      return response.json();
    }
  });
  
  // Setup form for adding/editing coach
  const form = useForm<CoachFormValues>({
    resolver: zodResolver(coachFormSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      school: "",
      sport: "Basketball",
      division: "Division I",
      position: "",
      city: "",
      state: "",
      notes: "",
      status: "Not Contacted"
    }
  });
  
  // Reset form when dialog closes
  const onDialogOpenChange = (open: boolean) => {
    if (!open) {
      form.reset();
      setSelectedCoach(null);
    }
    setIsAddDialogOpen(open);
  };
  
  const onEditDialogOpenChange = (open: boolean) => {
    if (!open) {
      form.reset();
      setSelectedCoach(null);
    }
    setIsEditDialogOpen(open);
  };
  
  // Handle form submission
  const onSubmit = async (data: CoachFormValues) => {
    try {
      if (selectedCoach) {
        // Update existing coach
        await apiRequest("PUT", `/api/coaches/${selectedCoach.id}`, data);
        toast({
          title: "Coach updated",
          description: `Successfully updated ${data.firstName} ${data.lastName}.`,
        });
        setIsEditDialogOpen(false);
      } else {
        // Add new coach
        await apiRequest("POST", "/api/coaches", data);
        toast({
          title: "Coach added",
          description: `Successfully added ${data.firstName} ${data.lastName}.`,
        });
        setIsAddDialogOpen(false);
      }
      
      // Refresh all coaches data
      queryClient.invalidateQueries({ queryKey: ["/api/coaches"] });
      
      // Also refresh saved coaches if the updated coach might be favorited
      if (selectedCoach?.favorite) {
        queryClient.invalidateQueries({ queryKey: ["/api/coaches/saved"] });
      }
    } catch (error) {
      console.error("Error saving coach:", error);
      toast({
        title: "Error",
        description: "Failed to save coach information.",
        variant: "destructive",
      });
    }
  };
  
  // Handle coach deletion
  const handleDeleteCoach = async (coachId: number) => {
    try {
      await apiRequest("DELETE", `/api/coaches/${coachId}`, undefined);
      toast({
        title: "Coach deleted",
        description: "Coach has been successfully removed.",
      });
      
      // Refresh all coaches data
      queryClient.invalidateQueries({ queryKey: ["/api/coaches"] });
      
      // Also refresh saved coaches
      queryClient.invalidateQueries({ queryKey: ["/api/coaches/saved"] });
    } catch (error) {
      console.error("Error deleting coach:", error);
      toast({
        title: "Error",
        description: "Failed to delete coach.",
        variant: "destructive",
      });
    }
  };
  
  // Handle coach edit
  const handleEditCoach = (coach: Coach) => {
    setSelectedCoach(coach);
    form.reset({
      firstName: coach.firstName,
      lastName: coach.lastName,
      email: coach.email,
      phone: coach.phone || "",
      school: coach.school,
      sport: coach.sport,
      division: coach.division || "Division I",
      position: coach.position || "",
      city: coach.city || "",
      state: coach.state || "",
      notes: coach.notes || "",
      status: coach.status || "Not Contacted"
    });
    setIsEditDialogOpen(true);
  };
  
  // Handle favoriting a coach
  const handleToggleFavorite = async (coachId: number, currentFavorite: boolean) => {
    try {
      // Update in database
      await apiRequest("PATCH", `/api/coaches/${coachId}/favorite`, { favorite: !currentFavorite });
      
      // Refresh all coaches data
      queryClient.invalidateQueries({ queryKey: ["/api/coaches"] });
      
      // Also refresh saved coaches
      queryClient.invalidateQueries({ queryKey: ["/api/coaches/saved"] });
      
      toast({
        title: currentFavorite ? "Removed from Saved Coaches" : "Added to Saved Coaches",
        description: currentFavorite 
          ? "Coach has been removed from your saved coaches." 
          : "Coach has been added to your saved coaches."
      });
    } catch (error) {
      console.error("Error updating favorite status:", error);
      toast({
        title: "Error",
        description: "Failed to update coach status.",
        variant: "destructive",
      });
    }
  };
  
  // Filter all coaches - using backend filtering through API params now
  const allCoaches = coaches || [];
  
  // Pagination calculations for all coaches
  const indexOfLastCoach = currentPage * coachesPerPage;
  const indexOfFirstCoach = indexOfLastCoach - coachesPerPage;
  const totalPages = allCoaches ? Math.ceil(allCoaches.length / coachesPerPage) : 0;
  const currentCoaches = allCoaches?.slice(indexOfFirstCoach, indexOfLastCoach);
  
  // Filter saved coaches - using backend filtering through API params 
  const filteredSavedCoaches = savedCoaches || [];
  
  // Pagination calculations for saved coaches
  const savedIndexOfLastCoach = savedCurrentPage * savedCoachesPerPage;
  const savedIndexOfFirstCoach = savedIndexOfLastCoach - savedCoachesPerPage;
  const savedTotalPages = filteredSavedCoaches ? Math.ceil(filteredSavedCoaches.length / savedCoachesPerPage) : 0;
  const currentSavedCoaches = filteredSavedCoaches?.slice(savedIndexOfFirstCoach, savedIndexOfLastCoach);
  
  // Handle page change
  const handlePageChange = (pageNumber: number) => {
    setCurrentPage(pageNumber);
  };
  
  // Get unique sports, divisions, conferences and roles for filters
  const sportOptions = coaches 
    ? [...new Set(coaches.map((coach: Coach) => coach.sport))]
    : [];
    
  const divisionOptions = coaches
    ? [...new Set(coaches.map((coach: Coach) => coach.division).filter(Boolean))]
    : [];
    
  const conferenceOptions = coaches
    ? [...new Set(coaches.map((coach: Coach) => coach.conference).filter(Boolean))]
    : [];
    
  const roleOptions = coaches
    ? [...new Set(coaches.map((coach: Coach) => coach.position).filter(Boolean))]
    : [];
  
  return (
    <div>
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Find Coaches</h1>
        <p className="text-gray-600">Discover and track college coaches for your recruitment journey</p>
      </div>

      <Card className="mb-6">
        <CardHeader className="pb-3">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
            <CardTitle>All Coaches</CardTitle>
            <div className="flex items-center space-x-2 mt-2 sm:mt-0">
              {/* Advanced button moved to filter section */}
            </div>
          </div>
        </CardHeader>
        <CardContent className="pb-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="relative md:col-span-2">
              <SearchIcon className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search coaches..."
                className="pl-9"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            
            <div>
              <Select value={sportFilter} onValueChange={setSportFilter}>
                <SelectTrigger className="w-full">
                  <div className="flex items-center gap-2">
                    <Trophy className="h-4 w-4 text-gray-400" />
                    <SelectValue placeholder="Sport" />
                  </div>
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all_sports">All Sports</SelectItem>
                  <SelectItem value="Mens Basketball">Men's Basketball</SelectItem>
                  <SelectItem value="Womens Basketball">Women's Basketball</SelectItem>
                  <SelectItem value="Football">Football</SelectItem>
                  <SelectItem value="Mens Soccer">Men's Soccer</SelectItem>
                  <SelectItem value="Womens Soccer">Women's Soccer</SelectItem>
                  <SelectItem value="Baseball">Baseball</SelectItem>
                  <SelectItem value="Softball">Softball</SelectItem>
                  <SelectItem value="Mens Volleyball">Men's Volleyball</SelectItem>
                  <SelectItem value="Womens Volleyball">Women's Volleyball</SelectItem>
                  <SelectItem value="Mens Lacrosse">Men's Lacrosse</SelectItem>
                  <SelectItem value="Womens Lacrosse">Women's Lacrosse</SelectItem>
                  <SelectItem value="Mens Golf">Men's Golf</SelectItem>
                  <SelectItem value="Womens Golf">Women's Golf</SelectItem>
                  <SelectItem value="Mens Tennis">Men's Tennis</SelectItem>
                  <SelectItem value="Womens Tennis">Women's Tennis</SelectItem>
                  <SelectItem value="Mens Track">Men's Track</SelectItem>
                  <SelectItem value="Womens Track">Women's Track</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          
          <div className="flex justify-end items-center mb-6">
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="outline" size="sm">
                  <SlidersHorizontal className="h-4 w-4 mr-2" />
                  Advanced Filters
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Advanced Filters</DialogTitle>
                  <DialogDescription>
                    Filter coaches by additional criteria
                  </DialogDescription>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                  <div className="grid gap-2">
                    <Label htmlFor="division">Division</Label>
                    <Select value={divisionFilter} onValueChange={setDivisionFilter}>
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder="All Divisions" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all_divisions">All Divisions</SelectItem>
                        <SelectItem value="Division I">Division I</SelectItem>
                        <SelectItem value="Division II">Division II</SelectItem>
                        <SelectItem value="Division III">Division III</SelectItem>
                        <SelectItem value="NAIA">NAIA</SelectItem>
                        <SelectItem value="JUCO">JUCO</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="conference">Conference</Label>
                    <Select value={conferenceFilter} onValueChange={setConferenceFilter}>
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder="All Conferences" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all_conferences">All Conferences</SelectItem>
                        {conferenceOptions.map((conference) => (
                          <SelectItem key={conference} value={conference}>
                            {conference}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <DialogFooter>
                  <Button type="submit" onClick={() => document.querySelector('[role="dialog"] button[aria-label="Close"]')?.click()}>
                    Apply Filters
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
          
          {/* Display the list of all coaches */}
          {isLoading ? (
            <div className="animate-pulse">
              <div className="h-10 bg-gray-200 rounded w-full mb-4"></div>
              <div className="space-y-3">
                <div className="h-10 bg-gray-200 rounded w-full"></div>
                <div className="h-10 bg-gray-200 rounded w-full"></div>
                <div className="h-10 bg-gray-200 rounded w-full"></div>
                <div className="h-10 bg-gray-200 rounded w-full"></div>
              </div>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>School</TableHead>
                    <TableHead>Sport</TableHead>
                    <TableHead>Division</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {allCoaches?.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={6} className="text-center py-4 text-gray-500">
                        No coaches found. Adjust your filters to see more coaches.
                      </TableCell>
                    </TableRow>
                  ) : (
                    currentCoaches?.map((coach: Coach) => (
                      <TableRow 
                        key={coach.id} 
                        className="cursor-pointer"
                        onClick={() => {
                          setSelectedCoachForView(coach);
                          setIsViewDialogOpen(true);
                        }}
                      >
                        <TableCell className="font-medium">
                          {coach.firstName} {coach.lastName}
                        </TableCell>
                        <TableCell>
                          <SchoolWithLogo school={coach.school} />
                        </TableCell>
                        <TableCell>{coach.sport}</TableCell>
                          <div className="flex items-center justify-end space-x-2" onClick={(e) => e.stopPropagation()}>
                            <Button 
                              variant="ghost" 
                              size="icon" 
                              onClick={(e) => {
                                e.stopPropagation();
                                handleToggleFavorite(coach.id, coach.favorite || false);
                              }}
                              className={coach.favorite ? "text-amber-500" : "text-gray-400 hover:text-amber-500"}
                            >
                              <Star className={`h-4 w-4 ${coach.favorite ? "fill-amber-500" : "fill-none"}`} />
                            </Button>
                            <Button 
                              variant="ghost" 
                              size="icon" 
                              onClick={(e) => {
                                e.stopPropagation();
                                window.location.href = `/emails?coachId=${coach.id}`;
                              }}
                            >
                              <MailIcon className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
              
              {/* Pagination Controls */}
              {allCoaches && allCoaches.length > 0 && (
                <div className="flex items-center justify-between mt-4">
                  <div className="text-sm text-gray-500">
                    Showing {indexOfFirstCoach + 1} to {Math.min(indexOfLastCoach, allCoaches.length)} of {allCoaches.length} coaches
                  </div>
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handlePageChange(currentPage - 1)}
                      disabled={currentPage === 1}
                    >
                      <ChevronLeft className="h-4 w-4 mr-1" />
                      Previous
                    </Button>
                    <div className="flex items-center space-x-1">
                      {Array.from({ length: Math.min(totalPages, 5) }).map((_, i) => {
                        // Logic to show pages around the current page
                        let pageNum = i + 1;
                        if (totalPages > 5 && currentPage > 3) {
                          if (i === 0) {
                            pageNum = 1;
                          } else if (i === 1 && currentPage > 4) {
                            return (
                              <div key="ellipsis-start" className="px-2">
                                ...
                              </div>
                            );
                          } else {
                            pageNum = Math.min(
                              currentPage + i - Math.min(currentPage, 3),
                              totalPages
                            );
                          }
                        }
                        
                        // Don't show pages beyond total pages
                        if (pageNum > totalPages) return null;
                        
                        return (
                          <Button
                            key={pageNum}
                            variant={currentPage === pageNum ? "default" : "outline"}
                            size="sm"
                            className="w-9 h-9 p-0"
                            onClick={() => handlePageChange(pageNum)}
                          >
                            {pageNum}
                          </Button>
                        );
                      })}
                      
                      {totalPages > 5 && currentPage < totalPages - 2 && (
                        <div className="px-2">...</div>
                      )}
                      
                      {totalPages > 5 && currentPage < totalPages - 1 && (
                        <Button
                          variant="outline"
                          size="sm"
                          className="w-9 h-9 p-0"
                          onClick={() => handlePageChange(totalPages)}
                        >
                          {totalPages}
                        </Button>
                      )}
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handlePageChange(currentPage + 1)}
                      disabled={currentPage === totalPages || totalPages === 0}
                    >
                      Next
                      <ChevronRight className="h-4 w-4 ml-1" />
                    </Button>
                  </div>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="pb-3">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
            <CardTitle>My Saved Coaches</CardTitle>
          </div>
        </CardHeader>
        <CardContent className="pb-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="relative md:col-span-2">
              <SearchIcon className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search saved coaches..."
                className="pl-9"
                value={savedSearchQuery}
                onChange={(e) => setSavedSearchQuery(e.target.value)}
              />
            </div>
            
            <div>
              <Select value={savedSportFilter} onValueChange={setSavedSportFilter}>
                <SelectTrigger className="w-full">
                  <div className="flex items-center gap-2">
                    <Trophy className="h-4 w-4 text-gray-400" />
                    <SelectValue placeholder="Sport" />
                  </div>
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all_sports">All Sports</SelectItem>
                  {sportOptions.map((sport) => (
                    <SelectItem key={sport} value={sport}>
                      {sport}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Select value={savedDivisionFilter} onValueChange={setSavedDivisionFilter}>
                <SelectTrigger className="w-full">
                  <div className="flex items-center gap-2">
                    <School className="h-4 w-4 text-gray-400" />
                    <SelectValue placeholder="Division" />
                  </div>
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all_divisions">All Divisions</SelectItem>
                  <SelectItem value="Division I">Division I</SelectItem>
                  <SelectItem value="Division II">Division II</SelectItem>
                  <SelectItem value="Division III">Division III</SelectItem>
                  <SelectItem value="NAIA">NAIA</SelectItem>
                  <SelectItem value="JUCO">JUCO</SelectItem>
                  {divisionOptions
                    .filter(d => !["Division I", "Division II", "Division III", "NAIA", "JUCO"].includes(d))
                    .map((division) => (
                      <SelectItem key={division} value={division}>
                        {division}
                      </SelectItem>
                    ))
                  }
                </SelectContent>
              </Select>
            </div>
          </div>
        
          {isSavedLoading ? (
            <div className="animate-pulse">
              <div className="h-10 bg-gray-200 rounded w-full mb-4"></div>
              <div className="space-y-3">
                <div className="h-10 bg-gray-200 rounded w-full"></div>
                <div className="h-10 bg-gray-200 rounded w-full"></div>
                <div className="h-10 bg-gray-200 rounded w-full"></div>
              </div>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>School</TableHead>
                    <TableHead>Sport</TableHead>
                    <TableHead>Division</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredSavedCoaches?.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={6} className="text-center py-4 text-gray-500">
                        No saved coaches found. Star coaches in the All Coaches section to add them here.
                      </TableCell>
                    </TableRow>
                  ) : (
                    currentSavedCoaches?.map((coach: Coach) => (
                      <TableRow 
                        key={coach.id}
                        className="cursor-pointer"
                        onClick={() => {
                          setSelectedCoachForView(coach);
                          setIsViewDialogOpen(true);
                        }}
                      >
                        <TableCell className="font-medium">
                          {coach.firstName} {coach.lastName}
                        </TableCell>
                        <TableCell>
                          <SchoolWithLogo school={coach.school} />
                        </TableCell>
                        <TableCell>{coach.sport}</TableCell>
                        <TableCell>{coach.division}</TableCell>
                        <TableCell>
                          <div className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            {coach.status}
                          </div>
                        </TableCell>
                        <TableCell>{coach.email}</TableCell>
                        <TableCell className="text-right">
                          <div className="flex items-center justify-end space-x-2" onClick={(e) => e.stopPropagation()}>
                            <Button 
                              variant="ghost" 
                              size="icon" 
                              onClick={(e) => {
                                e.stopPropagation();
                                handleToggleFavorite(coach.id, coach.favorite || false);
                              }}
                              className="text-amber-500"
                            >
                              <Star className="h-4 w-4 fill-amber-500" />
                            </Button>
                            <Button variant="ghost" size="icon" onClick={() => window.location.href = `/emails?coachId=${coach.id}`}>
                              <MailIcon className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
              
              {/* Pagination for saved coaches */}
              {filteredSavedCoaches && filteredSavedCoaches.length > 0 && (
                <div className="flex items-center justify-between mt-4">
                  <div className="text-sm text-gray-500">
                    Showing {savedIndexOfFirstCoach + 1} to {Math.min(savedIndexOfLastCoach, filteredSavedCoaches.length)} of {filteredSavedCoaches.length} saved coaches
                  </div>
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSavedCurrentPage(savedCurrentPage - 1)}
                      disabled={savedCurrentPage === 1}
                    >
                      <ChevronLeft className="h-4 w-4 mr-1" />
                      Previous
                    </Button>
                    <div className="flex items-center space-x-1">
                      {Array.from({ length: Math.min(savedTotalPages, 5) }).map((_, i) => {
                        // Logic to show pages around the current page
                        let pageNum = i + 1;
                        if (savedTotalPages > 5 && savedCurrentPage > 3) {
                          if (i === 0) {
                            pageNum = 1;
                          } else if (i === 1 && savedCurrentPage > 4) {
                            return (
                              <div key="ellipsis-start" className="px-2">
                                ...
                              </div>
                            );
                          } else {
                            pageNum = Math.min(
                              savedCurrentPage + i - Math.min(savedCurrentPage, 3),
                              savedTotalPages
                            );
                          }
                        }
                        
                        // Don't show pages beyond total pages
                        if (pageNum > savedTotalPages) return null;
                        
                        return (
                          <Button
                            key={pageNum}
                            variant={savedCurrentPage === pageNum ? "default" : "outline"}
                            size="sm"
                            className="w-9 h-9 p-0"
                            onClick={() => setSavedCurrentPage(pageNum)}
                          >
                            {pageNum}
                          </Button>
                        );
                      })}
                      
                      {savedTotalPages > 5 && savedCurrentPage < savedTotalPages - 2 && (
                        <div className="px-2">...</div>
                      )}
                      
                      {savedTotalPages > 5 && savedCurrentPage < savedTotalPages - 1 && (
                        <Button
                          variant="outline"
                          size="sm"
                          className="w-9 h-9 p-0"
                          onClick={() => setSavedCurrentPage(savedTotalPages)}
                        >
                          {savedTotalPages}
                        </Button>
                      )}
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSavedCurrentPage(savedCurrentPage + 1)}
                      disabled={savedCurrentPage === savedTotalPages || savedTotalPages === 0}
                    >
                      Next
                      <ChevronRight className="h-4 w-4 ml-1" />
                    </Button>
                  </div>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>
      
      <Dialog open={isAddDialogOpen} onOpenChange={onDialogOpenChange}>
        <DialogTrigger asChild>
          <Button className="fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg">
            <PlusIcon className="h-6 w-6" />
          </Button>
        </DialogTrigger>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Add Coach</DialogTitle>
            <DialogDescription>
              Add a new coach to your database. Fill out the form below with the coach's details.
            </DialogDescription>
          </DialogHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="firstName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name</FormLabel>
                      <FormControl>
                        <Input placeholder="First name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="lastName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Last name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email</FormLabel>
                      <FormControl>
                        <Input placeholder="Email address" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="phone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Phone</FormLabel>
                      <FormControl>
                        <Input placeholder="Phone number" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="school"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>School</FormLabel>
                      <FormControl>
                        <Input placeholder="School name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="sport"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Sport</FormLabel>
                      <Select value={field.value} onValueChange={field.onChange}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select sport" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Basketball">Basketball</SelectItem>
                          <SelectItem value="Football">Football</SelectItem>
                          <SelectItem value="Soccer">Soccer</SelectItem>
                          <SelectItem value="Baseball">Baseball</SelectItem>
                          <SelectItem value="Softball">Softball</SelectItem>
                          <SelectItem value="Volleyball">Volleyball</SelectItem>
                          <SelectItem value="Swimming">Swimming</SelectItem>
                          <SelectItem value="Tennis">Tennis</SelectItem>
                          <SelectItem value="Track">Track</SelectItem>
                          <SelectItem value="Cross Country">Cross Country</SelectItem>
                          <SelectItem value="Golf">Golf</SelectItem>
                          <SelectItem value="Lacrosse">Lacrosse</SelectItem>
                          <SelectItem value="Hockey">Hockey</SelectItem>
                          <SelectItem value="Wrestling">Wrestling</SelectItem>
                          <SelectItem value="Rowing">Rowing</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="division"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Division</FormLabel>
                      <Select value={field.value} onValueChange={field.onChange}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select division" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Division I">Division I</SelectItem>
                          <SelectItem value="Division II">Division II</SelectItem>
                          <SelectItem value="Division III">Division III</SelectItem>
                          <SelectItem value="NAIA">NAIA</SelectItem>
                          <SelectItem value="JUCO">JUCO</SelectItem>
                          <SelectItem value="NJCAA">NJCAA</SelectItem>
                          <SelectItem value="USCAA">USCAA</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="position"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Position</FormLabel>
                      <FormControl>
                        <Input placeholder="Position" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="city"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>City</FormLabel>
                      <FormControl>
                        <Input placeholder="City" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="state"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>State</FormLabel>
                      <FormControl>
                        <Input placeholder="State" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status</FormLabel>
                      <Select value={field.value} onValueChange={field.onChange}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Not Contacted">Not Contacted</SelectItem>
                          <SelectItem value="Contacted">Contacted</SelectItem>
                          <SelectItem value="Interested">Interested</SelectItem>
                          <SelectItem value="Need Info">Need Info</SelectItem>
                          <SelectItem value="Not Available">Not Available</SelectItem>
                          <SelectItem value="Meeting Scheduled">Meeting Scheduled</SelectItem>
                          <SelectItem value="Follow-up">Follow-up</SelectItem>
                          <SelectItem value="Pending">Pending</SelectItem>
                          <SelectItem value="Visit Scheduled">Visit Scheduled</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <FormField
                control={form.control}
                name="notes"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Notes</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Add any notes about this coach"
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <DialogFooter>
                <Button type="submit">Save Coach</Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      
      <Dialog open={isEditDialogOpen} onOpenChange={onEditDialogOpenChange}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Edit Coach</DialogTitle>
            <DialogDescription>
              Update coach information. Modify the details below.
            </DialogDescription>
          </DialogHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="firstName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name</FormLabel>
                      <FormControl>
                        <Input placeholder="First name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="lastName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Last name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email</FormLabel>
                      <FormControl>
                        <Input placeholder="Email address" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="phone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Phone</FormLabel>
                      <FormControl>
                        <Input placeholder="Phone number" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="school"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>School</FormLabel>
                      <FormControl>
                        <Input placeholder="School name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="sport"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Sport</FormLabel>
                      <Select value={field.value} onValueChange={field.onChange}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select sport" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Basketball">Basketball</SelectItem>
                          <SelectItem value="Football">Football</SelectItem>
                          <SelectItem value="Soccer">Soccer</SelectItem>
                          <SelectItem value="Baseball">Baseball</SelectItem>
                          <SelectItem value="Softball">Softball</SelectItem>
                          <SelectItem value="Volleyball">Volleyball</SelectItem>
                          <SelectItem value="Swimming">Swimming</SelectItem>
                          <SelectItem value="Tennis">Tennis</SelectItem>
                          <SelectItem value="Track">Track</SelectItem>
                          <SelectItem value="Cross Country">Cross Country</SelectItem>
                          <SelectItem value="Golf">Golf</SelectItem>
                          <SelectItem value="Lacrosse">Lacrosse</SelectItem>
                          <SelectItem value="Hockey">Hockey</SelectItem>
                          <SelectItem value="Wrestling">Wrestling</SelectItem>
                          <SelectItem value="Rowing">Rowing</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="division"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Division</FormLabel>
                      <Select value={field.value} onValueChange={field.onChange}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select division" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Division I">Division I</SelectItem>
                          <SelectItem value="Division II">Division II</SelectItem>
                          <SelectItem value="Division III">Division III</SelectItem>
                          <SelectItem value="NAIA">NAIA</SelectItem>
                          <SelectItem value="JUCO">JUCO</SelectItem>
                          <SelectItem value="NJCAA">NJCAA</SelectItem>
                          <SelectItem value="USCAA">USCAA</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="position"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Position</FormLabel>
                      <FormControl>
                        <Input placeholder="Position" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="city"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>City</FormLabel>
                      <FormControl>
                        <Input placeholder="City" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="state"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>State</FormLabel>
                      <FormControl>
                        <Input placeholder="State" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status</FormLabel>
                      <Select value={field.value} onValueChange={field.onChange}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Not Contacted">Not Contacted</SelectItem>
                          <SelectItem value="Contacted">Contacted</SelectItem>
                          <SelectItem value="Interested">Interested</SelectItem>
                          <SelectItem value="Need Info">Need Info</SelectItem>
                          <SelectItem value="Not Available">Not Available</SelectItem>
                          <SelectItem value="Meeting Scheduled">Meeting Scheduled</SelectItem>
                          <SelectItem value="Follow-up">Follow-up</SelectItem>
                          <SelectItem value="Pending">Pending</SelectItem>
                          <SelectItem value="Visit Scheduled">Visit Scheduled</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <FormField
                control={form.control}
                name="notes"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Notes</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Add any notes about this coach"
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <DialogFooter>
                <Button type="submit">Update Coach</Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Coach View Dialog */}
      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="text-xl font-bold">
              {selectedCoachForView?.firstName} {selectedCoachForView?.lastName}
            </DialogTitle>
            <DialogDescription>
              {selectedCoachForView?.position && `${selectedCoachForView.position} • `}
              {selectedCoachForView?.school}
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
            <div>
              <h3 className="text-sm font-medium text-gray-500">Contact Information</h3>
              <div className="mt-2 space-y-3">
                <div className="flex items-center space-x-2">
                  <Mail className="h-4 w-4 text-gray-400" />
                  <span className="text-sm">{selectedCoachForView?.email}</span>
                </div>
                {selectedCoachForView?.phone && (
                  <div className="flex items-center space-x-2">
                    <Phone className="h-4 w-4 text-gray-400" />
                    <span className="text-sm">{selectedCoachForView.phone}</span>
                  </div>
                )}
              </div>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">School Information</h3>
              <div className="mt-2 space-y-3">
                <div className="flex items-center space-x-2">
                  <BookOpen className="h-4 w-4 text-gray-400" />
                  <span className="text-sm">{selectedCoachForView?.sport}</span>
                </div>
                {selectedCoachForView?.division && (
                  <div className="flex items-center space-x-2">
                    <School className="h-4 w-4 text-gray-400" />
                    <span className="text-sm">{selectedCoachForView.division}</span>
                  </div>
                )}
                {selectedCoachForView?.conference && (
                  <div className="flex items-center space-x-2">
                    <Trophy className="h-4 w-4 text-gray-400" />
                    <span className="text-sm">{selectedCoachForView.conference}</span>
                  </div>
                )}
                {(selectedCoachForView?.city || selectedCoachForView?.state) && (
                  <div className="flex items-center space-x-2">
                    <MapPin className="h-4 w-4 text-gray-400" />
                    <span className="text-sm">
                      {selectedCoachForView.city}{selectedCoachForView.city && selectedCoachForView.state && ', '}{selectedCoachForView.state}
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          {selectedCoachForView?.notes && (
            <div className="border-t pt-4 mt-2">
              <h3 className="text-sm font-medium text-gray-500">Notes</h3>
              <p className="mt-2 text-sm">{selectedCoachForView.notes}</p>
            </div>
          )}
          
          <DialogFooter className="flex justify-between items-center">
            <div className="flex items-center space-x-2">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => {
                  if (selectedCoachForView) {
                    handleToggleFavorite(
                      selectedCoachForView.id, 
                      selectedCoachForView.favorite || false
                    );
                  }
                }}
                className={selectedCoachForView?.favorite ? "text-amber-500" : "text-gray-400 hover:text-amber-500"}
              >
                <Star className={`h-4 w-4 mr-1.5 ${selectedCoachForView?.favorite ? "fill-amber-500" : "fill-none"}`} />
                {selectedCoachForView?.favorite ? "Remove from Saved" : "Add to Saved"}
              </Button>
            </div>
            
            <div className="space-x-2">

              <Button onClick={() => {
                setIsViewDialogOpen(false);
                if (selectedCoachForView) {
                  window.location.href = `/emails?coachId=${selectedCoachForView.id}`;
                }
              }}>
                <Mail className="h-4 w-4 mr-1.5" />
                Send Email
              </Button>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}